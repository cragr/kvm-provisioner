---
- name: Create CentOS 9 VM on KVM
  hosts: kvm_host
  become: true
  vars:
    vm_network: default
    ssh_public_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMtnq6htWpWwMEIBRzD4k5YRj/aC+SIzu6MsRg1VKIhe"
    centos_image_url: "https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2"
    
  tasks:
    - name: Install required packages
      ansible.builtin.dnf:
        name:
          - xorriso
          - qemu-img
          - libvirt-client
        state: present
  
    - name: Create VM directory
      ansible.builtin.file:
        path: "/mnt/nvme_storage/{{ vm_name }}"
        state: directory
        mode: '0755'
      
    - name: Download CentOS 9 cloud image
      ansible.builtin.get_url:
        url: "{{ centos_image_url }}"
        dest: "/mnt/nvme_storage/{{ vm_name }}/{{ vm_name }}.qcow2"
        mode: '0644'
      register: image_download
      
    - name: Resize disk image
      ansible.builtin.command: "qemu-img resize /mnt/nvme_storage/{{ vm_name }}/{{ vm_name }}.qcow2 {{ vm_disk_size_gb }}G"
      when: image_download.changed
      
    - name: Create cloud-init metadata file
      copy:
        dest: "/mnt/nvme_storage/{{ vm_name }}/metadata.yaml"
        content: |
          instance-id: {{ vm_name }}
          local-hostname: {{ vm_name }}
        mode: '0644'
      
    - name: Create cloud-init userdata file with SSH key
      ansible.builtin.copy:
        dest: "/mnt/nvme_storage/{{ vm_name }}/userdata.yaml"
        content: |
          #cloud-config
          users:
            - name: root
              ssh_authorized_keys:
                - {{ ssh_public_key }}
          ssh_pwauth: false
          disable_root: false
          chpasswd:
            expire: false
        mode: '0644'
      
    - name: Generate cloud-init ISO
      ansible.builtin.command: >
        xorriso -as mkisofs -output /mnt/nvme_storage/{{ vm_name }}/cloud-init.iso
        -volid cidata -joliet -rock
        /mnt/nvme_storage/{{ vm_name }}/userdata.yaml
        /mnt/nvme_storage/{{ vm_name }}/metadata.yaml
      
    - name: Define VM
      community.libvirt.virt:
        name: "{{ vm_name }}"
        command: define
        xml: |
          <domain type='kvm'>
            <name>{{ vm_name }}</name>
            <memory unit='MiB'>{{ vm_memory_mb }}</memory>
            <vcpu>{{ vm_vcpus }}</vcpu>
            <os>
              <type arch='x86_64'>hvm</type>
              <boot dev='hd'/>
            </os>
            <features>
              <acpi/>
              <apic/>
            </features>
            <clock offset='utc'/>
            <devices>
              <disk type='file' device='disk'>
                <driver name='qemu' type='qcow2'/>
                <source file='/mnt/nvme_storage/{{ vm_name }}/{{ vm_name }}.qcow2'/>
                <target dev='vda' bus='virtio'/>
              </disk>
              <disk type='file' device='cdrom'>
                <driver name='qemu' type='raw'/>
                <source file='/mnt/nvme_storage/{{ vm_name }}/cloud-init.iso'/>
                <target dev='hdc' bus='ide'/>
                <readonly/>
              </disk>
              <interface type='network'>
                <source network='{{ vm_network }}'/>
                <model type='virtio'/>
              </interface>
              <console type='pty'>
                <target type='serial' port='0'/>
              </console>
              <graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'>
                <listen type='address' address='0.0.0.0'/>
              </graphics>
            </devices>
          </domain>
      
    - name: Start VM
      community.libvirt.virt:
        name: "{{ vm_name }}"
        state: running
      
    - name: Get VM IP address
      ansible.builtin.shell: |
        virsh domifaddr {{ vm_name }} | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}'
      register: vm_ip_result
      retries: 60
      delay: 5
      until: vm_ip_result.stdout != ""
      changed_when: false
      
    - name: Display VM IP address
      ansible.builtin.debug:
        msg: "CentOS 9 VM created with IP: {{ vm_ip_result.stdout }}"
